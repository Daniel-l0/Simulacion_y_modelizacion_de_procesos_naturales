[MÚSICA] Bienvenidos de nuevo a nuestro curso de segunda semana sobre simulación y modelación de procesos naturales. En este quinto módulo vamos a introducir el lenguaje de programación Python 3. Hemos elegido este lenguaje para que sea el lenguaje de programación en el que se realizarán las pruebas del curso. ¿Por qué hemos elegido este programa? La primera ventaja es que es multiplataforma, por lo que se puede utilizar en sistemas Windows, Mac o Linux. También se puede utilizar con bastante facilidad en hardware más exótico. Tiene muchas características estupendas. Es un lenguaje relativamente sencillo pero potente, y también al utilizar la biblioteca NumPy vimos que puede ser también muy eficiente numéricamente. Otra gran ventaja es que tiene muchas bibliotecas de código abierto disponibles, que tienen muchas funcionalidades diferentes que usted puede querer o necesitar. Esta introducción está particularmente dirigida a programadores no experimentados. Así que si ya es un experto en Python puede saltarse el resto de estos módulos. Como descargo de responsabilidad, quiero advertirle de que éste es explícitamente un curso de Python 3. No será retrocompatible con Phyton 2, por lo que algunas de las cosas que le contaremos pueden no funcionar con Python 2. Antes de empezar le sugiero que instale al menos el programa Python 3 en su ordenador, puede descargarlo en la página web que está escrita en la diapositiva. [COUGH] Así que si quieren más información sobre Python, que sería buena y útil para el resto de la clase, les recomiendo alguna bibliografía que pueden encontrar en esta diapositiva. Y en particular, el libro gratuito, Dive into Python 3, que pueden descargar en el sitio web, cuya URL está escrita en la diapositiva. No duden también en consultar la documentación de Python 3 para conocer todas las características disponibles para funciones específicas. De acuerdo, así que existen dos clases principales de lenguajes. Los lenguajes interpretados y los lenguajes compilados. Python se encuentra en la clase interpretada. Entonces, ¿cuál es la diferencia básica entre estas dos clases de lenguajes? En los lenguajes compilados, que, como ejemplo, puede ver que C, C++, o Fortran son lenguajes compilados. En esta clase de lenguajes, lo que usted hará con su programa es que lo compilará de forma que ejecutará un programa que traducirá el código en segundos de instrucciones de máquina que se guardarán en otro archivo y luego, podrá ejecutar el archivo en su ordenador. Por otro lado, los lenguajes de interpretación funcionan de forma un poco diferente. Cuando ejecuta un programa, éste se interpreta directamente, por lo que tiene un programa llamado Intérprete que tomará su programa y sobre la marcha traducirá su programa en sub-rutinas que están precompiladas. Como ejemplo de lenguajes de programación interpretados tiene Python o JavaScript o Ruby hay un montón de ellos. Bien, entonces ¿cuáles son las diferencias entre lenguajes interpretados y compilados? Pues estas son sólo tendencias, así que puede que no sean ciertas para cualquier par o lenguajes interpretados y compilados pero en promedio son ciertas. Así que la principal ventaja de los lenguajes compilados es que tienden a ser más eficientes que los lenguajes interpretados. La razón es que hay una sobrecarga en el lenguaje interpretado, porque tiene que, sobre la marcha, traducir el código en subrutinas que están precompiladas y esto puede llevar algún tiempo. Además, el código compilado se compila especialmente para su máquina. Así que hay algún tipo de optimización quizá mejor que se puede realizar. Por otro lado, el código interpretado tiene muchas ventajas y grandes características. Dado que puede saltarse el proceso de compilación, suelen ser más fáciles y rápidos de desarrollar. El código interpretado también tiende a ser más portable. De hecho, todo lo que haga en su intérprete funciona igual independientemente de la máquina o del sistema operativo, lo que no siempre ocurre con el código compilado. Por último, otra característica agradable de los códigos interpretados es que están tipados dinámicamente. Bien, con esto terminamos la introducción básica a Python 3. Y en el próximo módulo aprenderemos a ejecutar un programa Python 3. Gracias por su atención. [MÚSICA]