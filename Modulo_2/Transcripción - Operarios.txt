[MUSICA] Bienvenidos de nuevo a la segunda semana del curso, Simulación y modelación de procesos naturales. En este octavo módulo del curso, hablaremos de los operadores en Python 3. Los operadores en Python pueden actuar sobre cualquier tipo que exista para instancia para los tipos numéricos. Tienes todas las operaciones matemáticas estándar que puedes esperar. Así que tienes la suma, que se representa con el signo más, la resta que es menos, la multiplicación es una estrella. Y luego tienes la división. La división es un poco particular en Python. En Python cuando divides dos números con una sola barra, siempre haces una división real. Incluso si divides dos enteros, sigues haciendo una división real. Para hacer la división de enteros necesita usar el símbolo con dos barras. También tiene la operación módulo y la exponenciación, que pueden resultar muy útiles. Por último, también tiene los operadores unarios más y menos. Así que en la parte derecha de la primera línea, tiene un ejemplo de cómo usar los operadores más y menos. En la tercera línea, un ejemplo de cómo utilizar la multiplicación, y el ejemplo importante es la ilustración de la división real y entera. En la división real ve que incluso estamos dividiendo los dos enteros, 10/3. El resultado es un número de coma flotante. Un inminente, 3,33333. Para la división entera tuvimos que utilizar el operador de doble barra. Entonces el resultado es un entero y es 3. El módulo funciona exactamente igual que en todos los demás lenguajes, sólo hay que poner un entero, el tanto por ciento simple y 3. Y el resultado es el resto de la división entera. Y también tenemos un ejemplo sobre exponenciación escribimos 2,0 a la potencia 10 con el símbolo de estrella doble. También tiene operadores sobre tipos de secuencia, por lo que la lista se detiene y todo eso. Así que estos operadores son la concatenación que es un símbolo más, que tomaremos dos secuencias y las ensamblaremos y daremos el resultado en una tercera secuencia. Podemos construir copias de una secuencia con el símbolo, estrella, así que esto lo veremos en un ejemplo más adelante. Podemos acceder a un solo elemento de nuestra secuencia con los corchetes. Y también tenemos el operador slice, que permite acceder a más de un índice de una secuencia a la vez. Muy bien, en el ejemplo de la derecha de la diapositiva, tenemos una lista que contiene números y una cadena. Primero accedemos al índice zeroth de nuestra, al menos a, que da el resultado 1. Podemos cambiar el índice cero de nuestra secuencia, y asignarle el valor 9, luego tenemos un ejemplo de concatenación de listas. Así que simplemente añadimos la lista a a la lista a, por lo que esto sólo hace una concatenación de la lista dos veces y devuelve el resultado. También hicimos una copia de a dos veces y concatenamos el resultado, y finalmente tenemos ejemplos con el operador slice. El operador slice le permite ir de un índice a otro índice. Por defecto el paso entre índices es uno, es lo que se ilustra en la línea 10. Así que el resultado de un corchete cuadrado abierto 1, columna 4, corchete cerrado es acceder, y esto es de 1 a 4. Puede hacer lo mismo teniendo un salto entre los índices que no sea uno. Aquí en la línea 12 tenemos un salto entre los índices de 2. Por último, también puede querer acceder a todos los índices que están por encima de un cierto índice o por debajo de un cierto índice. Esto es lo que se hace en la línea 14 y 16. También tiene operadores booleanos en Python. Así que todos los operadores de comparación, así que más pequeño, que es simplemente el símbolo más pequeño que. Más pequeño o igual, que es un símbolo más pequeño que seguido de un igual. De manera similar, mayor que, y mayor o igual. Tiene que probar la igualdad entre dos objetos, por lo que un doble igual, y para probar la no igualdad, que es signo de exclamación seguido de un igual. Así que también tiene todos los operadores booleanos, o, y, y no. Y finalmente, tiene uno último que viene muy bien, que es, en o no en. Este prueba la existencia de un objeto en una secuencia. Así que en la columna central de la diapositiva, vemos el primero cómo comparamos números enteros por ejemplo. Probamos si dos es menor que uno, este no es el caso por lo que el retorno es falso. Luego podemos probar entre la igualdad entre variables, aquí estamos diciendo el valor 1 al valor a y b, 2 al valor b, probamos la igualdad este no es el caso, por lo que el retorno es falso. También probamos si 1 no es igual a 2 en la siguiente línea, esta es una declaración verdadera. Y luego también podemos hacer combinaciones de todas esas declaraciones, por ejemplo, podemos probar esto, si 1 no es = 2, y 1 = 1. Como cada una de las afirmaciones son ambas verdaderas, el resultado también es verdadero. Entonces en la columna derecha de la diapositiva, tenemos también una característica fanny de los operadores or y end en Python, es que dan como salida uno de sus operandos. Si probamos por ejemplo 2 o 3, el resultado de estas pruebas será 2, si probamos 2 y 3 el resultado será 3. Las comparaciones no se limitan a números, también se pueden hacer con caracteres. Por ejemplo, podemos probar la igualdad entre a, a = a, por lo que el resultado es verdadero. También podemos probar si a es mayor, es mayor que b, esto es falso. Usualmente el orden alfabético es utilizado para el incremento en caracteres. Finalmente en la línea 11, tiene también una ilustración de cómo probar si un objeto en particular está en una lista. Así que definimos una lista en la línea 11 y probamos si la cadena b está en a, lo que es el caso, por lo que devuelve verdadero. Así que con esto termina el módulo sobre operadores. En el próximo módulo, hablaremos sobre estructuras de control y en particular sentencias condicionales. Gracias por su atención. [MÚSICA]