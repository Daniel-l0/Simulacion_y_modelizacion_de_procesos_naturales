[MÚSICA] Hola a todos. Hoy continuaremos nuestro curso sobre simulación y modelado de procesos naturales con un capítulo sobre modelado de autómatas celulares. Por lo tanto, el contenido de este capítulo se basará principalmente en el libro que escribí con mi colega Michel Droz. Por lo tanto, me gustaría empezar con una definición y un concepto básicos. Y la primera pregunta que nos haremos es ¿qué es un autómata celular? Hay varias definiciones. Supongo que la que más queremos conservar aquí se decide en su [TOS] abstracción matemática de un proceso físico. En otras palabras, es un universo ficticio. Como veremos, todo es discreto en este pequeño universo que creamos. Por otro lado, también se podría considerar al autómata celular como un objeto matemático, lo cual es interesante por sí solo. Y, en particular, es interesante porque relaciona la física con alguna cuestión de calculabilidad, por ejemplo, la computación universal, la intratabilidad o la complejidad algorítmica. Y vemos que, a veces, la calculabilidad y la física están estrechamente relacionadas. Así que, para presentarte a los autómatas celulares, quiero seguir una regla muy simple, probablemente una de las más intuitivas. Por lo tanto, consideraré un tablero de ajedrez. Así que mi espacio en la celda es discreto, como puedes ver en esta imagen. Y la celda puede tener dos colores. O son blancas o grises. Y en esta imagen, solo tengo una celda gris y todo lo demás es blanco, ¿de acuerdo? Por lo tanto, decimos que el posible estado de mi universo es 0 o 1 para cada posición i j de mi espacio. Y este estado, o estos estados, evolucionarán en el tiempo según una regla que tengo que especificar. Y una regla en este ejemplo tan simple es simplemente sumar los estados de las cuatro vecinas de cada celda. Son las celdas que están al norte, este, sur y oeste de la celda que se actualiza. Y si esta suma es par, las celdas centrales se convierten en 0. Si es impar, se convierte en 1. Así que consideremos como ejemplo estas celdas, que son grises, que supongo que son 1. Tiene cuatro vecinas, que son 0. Así que 4 veces 0 es 0. Es un número par. Entonces, estas celdas centrales se convierten en 0, ahora es blanco. Ahora, cualquiera de los cuatro vecinos ve estas celdas en el vecindario. Y, por supuesto, su suma es 1, que es un número impar y se convierten en 1, ¿de acuerdo? Así que todas las celdas están fechadas al mismo tiempo, es lo que llamamos actualización simultánea o actualización paralela, y se pasa de una configuración en el momento t a una configuración en el momento t + 1. Así que esta regla parece bastante poco interesante pero, sorprendentemente, genera patrones muy interesantes que puedes ver en estas diapositivas. Así que aquí empezamos en el tiempo t = 0, con un espacio que es mayoritariamente blanco, por lo que no se ven todas las celdas que rodean la parte central. La parte central es un rectángulo de aproximadamente 8 x 10 celdas negras, creo. Y simplemente dejamos que el sistema evolucione. Y aquí, por ejemplo, tienes tiempo un poco más tarde. Ya ves que tienes un patrón. Por lo tanto, no es después de una iteración sino después de 31 iteraciones. Y esto es un poco más tarde, y así sucesivamente. Como ves, generas muchos patrones diferentes a partir de estas reglas tan simples. Parece que estamos generando algo complejo, y volveré un poco más adelante en un próximo módulo sobre esta cuestión. Por ahora, acabamos de aprender cómo definimos una regla y qué tipo de imagen podemos obtener de ella. Si quiero ser un poco más formal, diría que el autómata celular es un espacio discreto A. Así que coge tu espacio natural, que puede ser en 1D, 2D o 3D, y lo divides regularmente en celdas. Luego, asumes que dispones de un tiempo discreto para la evolución de tu sistema. El sistema no existe en el medio, solo tiene intrínsecamente un tiempo discreto. No es una discretización de un proceso, es simplemente, por definición, un objeto que evoluciona discretamente. Y los estados de cada una de estas celdas son números discretos, ¿de acuerdo? Por lo tanto, pertenece a un conjunto discreto S, que puede ser 0, 1, como muestra el ejemplo anterior, pero puede tener un poco más de valores para situaciones más complejas. Y luego, la ley que rige este universo viene dada por lo que llamamos una regla de evolución o la regla del autómata celular, que es una función que es local. Por lo tanto, actúa solo sobre una célula y sus vecinas inmediatas. Es homogénea en el sentido de que es la misma regla que se aplica a todas las celdas de los sistemas y se define en la vecindad. Es decir, cuáles son las células que la célula central puede ver para decidir su futuro. Como he mencionado, se trata de una actualización sincrónica, por lo que todas las células toman al mismo tiempo la decisión de evolucionar según la configuración de su vecina. Así que matemáticamente, puedes escribir esto como una tupla, pero no vamos a usarla tanto aquí. Así que mencioné que la vecindad es un aspecto clave de los autómatas celulares. Por lo tanto, hay varios barrios que suelen estar definidos y muy utilizados. Así que este se llama barrio de von Neumann. Este se llama barrio de Moore. Básicamente te dice cuáles son los vecinos a los que esta célula central se fijará para evolucionar. Así que el barrio de von Neumann se mira a sí mismo y a sus cuatro vecinos: norte, sur, este y oeste. En el barrio de Moore, también utiliza las celdas diagonales para decidir el futuro. Tienes otro vecindario posible que exista, como por ejemplo el vecindario de Margolus u otro que puedas construir tú mismo, no hay límite para eso. Solo tienes que definir cuáles son las celdas que están visibles para realizar la regla de actualización. Por supuesto, tu espacio no suele ser infinito, especialmente si estás en una computadora, tienes que encontrar las condiciones de los límites. La situación más sencilla es tener una condición de límite periódica. Me refiero a que rodeas una esquina de tu espacio, como se ilustra en este caso 1D, en el que tienes tu sistema aquí. Así que la primera celda, la última celda y luego la vecina izquierda de esta primera celda es en realidad b, que es la última celda. Básicamente, el vecino derecho de b será a. Así que haz un bucle cerrado con esto. Pero podría tener una condición de límite diferente, según el problema que desee simular. Por ejemplo, puedes poner un valor fijo, aquí pongo 1, lo que quieras. De hecho, puedes volver a copiar el valor que tenías preparado como vecino ficticio. O puedes coger el que está al otro lado y ponerlo aquí, y seguro que tienes otras ideas. Así que todo es gratis para ti, pero esos barrios son muy conocidos y se utilizan en varias simulaciones. Así que la definición que les di para la automatización solar es algo puramente determinista. Cada vez que ejecutas la misma regla con la misma condición inicial, obtienes lo mismo, pero también podrías querer extender esta definición a un autómata celular estocástico. Y los autómatas celulares estocásticos serían aquellos en los que la regla es en sí misma aleatoria. Esto significa que es posible que tenga varias reglas que aplique en una posición determinada con cierta probabilidad. Y, en realidad, basta con tener un poco de información extra en cada celda, que también va evolucionando con el tiempo para seleccionar cuál de las reglas quieres aplicar. Por lo tanto, ya está incluido de alguna manera en la definición original, siempre que se pueda tener un estado de una celda que evolucione aleatoriamente. [TOS] Y sabemos que los autómatas celulares producen números aleatorios, así que es posible. También discutimos el hecho de que tenemos una actualización sincrónica. A veces, la actualización sincrónica produce alguna oscilación en un sistema y, a veces, puede que no sea muy física. Existe un gran debate sobre si la actualización sincrónica o asíncrona es mejor para modelar un sistema físico. Por definición, una CA es sincrónica, pero si desea una actualización asíncrona, solo tiene que seleccionar las celdas que desea actualizar en un momento dado. Y de nuevo, basta con añadir un estado nuevo y adicional a la celda, para indicarle si se actualizará en ese momento dado. Y, por supuesto, este estado adicional tiene que evolucionar con el tiempo más o menos, de modo que, en promedio, todas las celdas se actualicen por igual. Una vez más, es algo que puedes implementar directamente en tu modelo sincrónico, por lo que no es realmente un problema en términos de definición. Es solo una forma práctica en la que, por supuesto, utilizarías en tu ordenador una forma más eficiente de realizar esta actualización asincrónica. Por último, puedes decir que quieres que una regla sea diferente en diferentes posiciones de tu espacio. Por ejemplo, dirías que la parte izquierda del espacio se actualiza según la primera regla y la parte derecha del espacio según la regla dos. Y de nuevo, basta con tener un estado adicional que indique qué regla se aplica en qué celda. Así que, repito, no es imposible con la definición que te di antes. Así que cuando se trata de implementar un autómata celular en una computadora, hay varias maneras. Uno de ellos se denomina cálculo sobre la marcha, por lo que para cada celda y en cada intervalo temporal hay que calcular la regla de forma explícita. Así que para mi regla de paridad que te he explicado antes, solo tienes que hacer la suma de tus cuatro vecinos. Utilizo este signo, el signo más con un círculo alrededor, para decir que es el módulo más 2, por lo que el resultado es 0 ó 1, según la suma sea par o impar. Así que esa es una forma de calcular simplemente mediante una fórmula matemática que se repite una y otra vez. Pero ya que, en realidad, solo tienes un conjunto finito de configuraciones posibles. Por lo tanto, sus cuatro vecinos, aquí hay cuatro vecinos, solo pueden adoptar 16 posibles configuraciones diferentes. Así que quizás quieras codificar todos estos 16 estados posibles para precalcular toda la salida. Y eso se llama tabla de consulta. Lo que significa que a partir del valor de su vecino, aquí cuatro vecinos, se calcula un índice, que es simplemente un número entre 0 y 15, de acuerdo con esta sencilla fórmula. Y luego se obtiene el nuevo estado de las celdas como el valor de una tabla para este índice específico. Entonces, si la regla es complicada, puede precalcular todo de una vez y tener una implementación muy rápida. Por lo tanto, es interesante contar cuántos universos puedo construir a partir de esta idea. Así que un universo, o un sistema, se define por la elección de su regla de evolución. Entonces, ¿cuántas reglas puedo definir en mi espacio, vale? Así que si puedes tener m estados por celda, y cada celda está mirando a k vecinas, es fácil ver que m entre m y k es el número de reglas posibles. Entonces, ¿por qué es así? De m a k es [COUGH] el número de configuraciones posibles de tu vecino k, sabiendo que cada uno de ellos toma m valores posibles, ¿de acuerdo? Para todas estas configuraciones hay que dar el resultado, que es un número que pertenece a los m estados posibles. Así que tenemos m entre m y k posibles. Así que es extremadamente grande, ¿de acuerdo? Así que el espacio de posibles reglas, o el posible universo que puedo construir a partir de un autómata celular, es extremadamente grande siempre que m y k sean incluso pequeños, ¿de acuerdo? En realidad, la mayoría de las reglas que construyes son muy poco interesantes. Así que solo unos pocos están haciendo cosas buenas y pueden estar relacionadas con la física. Y la mayoría del resto, parecen ruidos aleatorios, o van a cero, o van a uno, o no son muy agradables. Vale la pena mencionar el trabajo realizado por Wolfram sobre los autómatas celulares unidimensionales, donde clasifica todas las reglas posibles con los estados cero y uno. Así que, en realidad, debería ser mejor decir dos valores posibles que uno, lo siento. Si te ves a ti mismo y a tu vecino de izquierda y derecha, puedes construir a partir de estas 256 reglas posibles y estudiarlas todas. Y aquí tenemos una muestra de cuatro posibles tipos de evolución, que Wolfram clasificó en cuatro clases: clase I, II, III y IV. Así que es un autómata celular unidimensional, y os estoy mostrando una imagen en 2D, ¿cómo es? Deberías entender esto de la siguiente manera. Así que la primera línea que ves aquí, es en realidad la condición inicial. Luego, en el momento t más 1, dibujo una segunda línea con el segundo estado, y así sucesivamente. Básicamente, se ve una imagen en 2D que se desarrolla a partir de la evolución de una línea en 1D. Así que aquí tenemos un sistema, todo va a cero o, potencialmente, todo iría a uno. Aquí puede ver que se trata de una situación periódica. Aquí, es más interesante. Se trata de algo que podríamos llamar caótico, ¿de acuerdo? Es una imagen muy rica. Y lo que es más interesante, se ve esta clase cuatro, que tiene una combinación de estructura persistente, comportamiento caótico y estados constantes. Y esa es probablemente la situación más interesante, en la que se ve un comportamiento muy rico y complejo. Así que con esto me gustaría terminar este primer módulo sobre conceptos y definiciones básicos. Y la próxima vez discutiremos un pequeño hecho histórico sobre los autómatas celulares, así que gracias por su atención. [MÚSICA]